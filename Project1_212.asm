
ORG 0

	acall	CONFIGURE_LCD

KEYBOARD_LOOP:

FIRST:	acall KEYBOARD
	;now, A has the key pressed
	ACALL SEND_DATA
	SUBB A,#30H
	MOV R1,A	
	ACALL KEYBOARD
	MOV R3,A
	PUSH ACC		
	MOV A,#06H	;INCREMENT CURSOR (SHIFT CURSOR TO RIGHT)
	acall SEND_COMMAND
	MOV A,R3	
	ANL  A, #0F0H
	CJNE A,#30H, NEXT
	POP ACC
	ACALL SEND_DATA
	MOV R3,A
	ANL A, #0FH
	MOV R3, A
	MOV B, #10
	MOV A, R1
	MUL AB
	ADD A, R3
	MOV R2, A
	LJMP NEXT2
NEXT: MOV A,R3
      MOV R6, A
      mov A,R1
      MOV R2, A
      LJMP OPERATOR	
NEXT2:	ACALL KEYBOARD;
	;GET THE OPERATOR
	MOV R6, A
	MOV A,#06H	;INCREMENT CURSOR (SHIFT CURSOR TO RIGHT)
	acall SEND_COMMAND
	LJMP OPERATOR
		
SECOND:	MOV A,#06H	;INCREMENT CURSOR (SHIFT CURSOR TO RIGHT)
	acall SEND_COMMAND
	ACALL KEYBOARD; get the second number's first digit	
	ACALL SEND_DATA	
	SUBB A,#30H ;get the digit
	MOV R4,A
	ACALL KEYBOARD ;get the operator or 2nd digit	
	MOV R5,A
	PUSH ACC	
	MOV A,#06H	;INCREMENT CURSOR (SHIFT CURSOR TO RIGHT)
	acall SEND_COMMAND
	MOV A,R5
	ANL A, #0F0H
	CJNE A,#30H, EQUAL1
	
	POP ACC
	ACALL SEND_DATA
	
	 ;if a digit entered obtain the 2nd digit value
	MOV R5,A
	ANL A,#0FH
	MOV R5,A
	MOV B, #10
	MOV A,R4
	MUL AB
	ADD A, R5
	MOV R5, A
	ACALL KEYBOARD
HERE:	CJNE A, #44H, HERE
	SJMP EQUAL
	
EQUAL1:	MOV A, R4
	MOV  R5, A
EQUAL:	MOV A,#0C1H
	acall SEND_COMMAND
OPERATION:
	CJNE R6, #42H, HERE1
ADDITION1: 
	MOV A,R2
	ADD A,R5
	
	ACALL DEC2ASCII
	
	LJMP END
	 	
HERE1: CJNE R6, #41H, HERE2
	
SUBTRACTION1:
	MOV A,R2
	SUBB A, R5
	CPL A
	INC A
	PUSH ACC
	JZ ZERO
	JC NEGZERO
	ACALL DEC2ASCII
	LJMP END
NEGZERO: 
	MOV A, #2DH
	ACALL SEND_DATA	
	POP ACC
	ACALL DEC2ASCII
	LJMP END
ZERO:	MOV A, #30H
	ACALL SEND_DATA
	LJMP END
	
		
HERE2:CJNE R6, #2AH, DIVISION1

MULTIPLICATION1:
	MOV R7,#00
	MOV R0,#00
	MOV R1,#00
	MOV R3,#00

	MOV A,R2
	MOV B,R5
HOP:	MOV R2,A
HOPP:	INC R6
	CJNE R7,#10,HOPPP
		MOV R6,#00
		INC R0
	CJNE R0,#10, HOPPP
		MOV R0,#00
		INC R1
	CJNE R1,#10, HOPPP
		MOV R1,#00
		INC R3
HOPPP:	DJNZ R2, HOPP
	DJNZ R5, HOP
MOV A,R3
JZ come
INC R5
ADD A,#30H
LCALL SEND_DATA
come:MOV A,R1
CJNE R5,#00,come3
JZ come2
come3:INC R5
ADD A,#30H
LCALL SEND_DATA
come2:MOV A,R0
CJNE R5,#00,come4
JZ come5
come4:INC R5
ADD A,#30H
LCALL SEND_DATA
come5:MOV A,R6
ADD A,#30H
LCALL SEND_DATA
LJMP END
	
DIVISION1: 
	MOV R0, #0
	MOV R1,#0
	CJNE R5,#0, GO
 	MOV DPTR, #MYDTA
ERROR:	CLR A
	MOVC A,@A+DPTR
	CJNE A, #0, DEVAM
	LJMP END	
DEVAM:	acall SEND_DATA
	MOV A, #06H
	ACALL SEND_COMMAND	
	inc dptr
	sjmp ERROR
	
GO:	MOV A,R2
	MOV B,R5
	DIV AB
	MOV R0, B
	MOV R1, A
	ACALL DEC2ASCII
	
	MOV A, R2
	MOV B, R5
	CJNE A, B, $+3
	DIV AB
	JNC HAYDA
	MOV A, R0
	JZ HEREEE

HAYDA:	MOV A, #06H
	ACALL SEND_COMMAND
	MOV A, #2EH
	ACALL SEND_DATA
	MOV A, #06H
	ACALL SEND_COMMAND
	
	MOV A, R0
	
	MOV B, #10
	MUL AB	
	MOV B, R5
	DIV AB
	JNZ HEREEEE
	ADD A, #30H
	ACALL SEND_DATA
	SJMP HEREEE
HEREEEE: MOV A, B
	MOV B, #10
	MUL AB	
	MOV B, R5
	DIV AB
	ADD A, #30H
	ACALL SEND_DATA
	
HEREEE:	LJMP END
	
OPERATOR: CJNE R6, #42H, OTHER1	  
ADDITION: MOV A,#2BH
	ACALL SEND_DATA 
	LJMP SECOND	
OTHER1: CJNE R6, #41H, OTHER2	
SUBTRACTION:MOV A,#2DH
	ACALL SEND_DATA
	LJMP SECOND	
OTHER2:CJNE R6, #2AH, DIVISION
MULTIPLICATION:MOV A,#2AH
	ACALL SEND_DATA
	LJMP SECOND
DIVISION:MOV A,#2FH
	ACALL SEND_DATA
	LJMP SECOND
	
DEC2ASCII: 
	MOV R0, #0
	MOV R1, #0
	MOV R2, #0
	MOV R3, #0
	MOV R4, #0
	MOV R5, #0
	MOV R6, #0
	MOV R7, #0
		
	MOV B, #100 ;GET THE DIGITS	
	DIV AB
	MOV R0, A
	CJNE A, #0, GIT1
	LJMP GIT2
	
GIT1:	ADD A, #30H
	ACALL SEND_DATA	
	MOV A,#06H
	ACALL SEND_COMMAND
	
GIT2:	MOV A,B
	MOV B,#10
	DIV AB
	MOV R1, A
	CJNE A, #0, GIT3
	SJMP GIT4
GIT3:	ADD A, #30H
	ACALL SEND_DATA
	MOV A,#06H
	ACALL SEND_COMMAND
	MOV A,B
	ADD A, #30H
	ACALL SEND_DATA
	SJMP ENDDD
GIT4:	CJNE R0, #0,GIT5
	
	MOV A,B
	ADD A, #30H
	ACALL SEND_DATA
	SJMP ENDDD
GIT5: 	CJNE R1, #0, GIT6
	MOV A, #30H
	ACALL SEND_DATA
	MOV A,B
	ADD A, #30H
	ACALL SEND_DATA
	SJMP ENDDD
GIT6:   MOV A, B
	ADD A, #30H
	ACALL SEND_DATA
	
ENDDD:	RET
	
END:	ACALL KEYBOARD
	MOV R0, #0
	MOV R1, #0
	MOV R2, #0
	MOV R3, #0
	MOV R4, #0
	MOV R5, #0
	MOV R6, #0
	MOV R7, #0
	
	 MOV A, #80H
	 ACALL SEND_COMMAND
	 mov A,#01H
	 ACALL SEND_COMMAND
	 CLR A	 
	LJMP KEYBOARD_LOOP	
	

MYDTA: DB 'ERROR',0	
	





CONFIGURE_LCD:	;THIS SUBROUTINE SENDS THE INITIALIZATION COMMANDS TO THE LCD
	mov a,#38H	;TWO LINES, 5X7 MATRIX
	acall SEND_COMMAND
	mov a,#0FH	;DISPLAY ON, CURSOR BLINKING
	acall SEND_COMMAND
	mov a,#06H	;INCREMENT CURSOR (SHIFT CURSOR TO RIGHT)
	acall SEND_COMMAND
	mov a,#01H	;CLEAR DISPLAY SCREEN
	acall SEND_COMMAND
	mov a,#80H	;FORCE CURSOR TO BEGINNING OF THE FIRST LINE
	acall SEND_COMMAND
	
	ret



SEND_COMMAND:
	mov p1,a		;THE COMMAND IS STORED IN A, SEND IT TO LCD
	clr p3.5		;RS=0 BEFORE SENDING COMMAND
	clr p3.6		;R/W=0 TO WRITE
	setb p3.7	;SEND A HIGH TO LOW SIGNAL TO ENABLE PIN
	acall DELAY
	clr p3.7
	ret


SEND_DATA:
	mov p1,a		;SEND THE DATA STORED IN A TO LCD
	setb p3.5	;RS=1 BEFORE SENDING DATA
	clr p3.6		;R/W=0 TO WRITE
	setb p3.7	;SEND A HIGH TO LOW SIGNAL TO ENABLE PIN
	acall DELAY
	clr p3.7
	ret


DELAY:
	push 0
	push 1
	mov r0,#50
DELAY_OUTER_LOOP:
	mov r1,#255
	djnz r1,$
	djnz r0,DELAY_OUTER_LOOP
	pop 1
	pop 0
	ret


KEYBOARD: ;takes the key pressed from the keyboard and puts it to A
	mov	P0, #0ffh	;makes P0 input
K1:
	mov	P2, #0	;ground all rows
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, K1
K2:
	acall	DELAY
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, KB_OVER
	sjmp	K2
KB_OVER:
	acall DELAY
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, KB_OVER1
	sjmp	K2
KB_OVER1:
	mov	P2, #11111110B
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, ROW_0
	mov	P2, #11111101B
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, ROW_1
	mov	P2, #11111011B
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, ROW_2
	mov	P2, #11110111B
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, ROW_3
	ljmp	K2
	
ROW_0:
	mov	DPTR, #KCODE0
	sjmp	KB_FIND
ROW_1:
	mov	DPTR, #KCODE1
	sjmp	KB_FIND
ROW_2:
	mov	DPTR, #KCODE2
	sjmp	KB_FIND
ROW_3:
	mov	DPTR, #KCODE3
KB_FIND:
	rrc	A
	jnc	KB_MATCH
	inc	DPTR
	sjmp	KB_FIND
KB_MATCH:
	clr	A
	movc	A, @A+DPTR; get ASCII code from the table 
	ret

;ASCII look-up table 
KCODE0:	DB	'1', '2', '3', 'A'
KCODE1:	DB	'4', '5', '6', 'B'
KCODE2:	DB	'7', '8', '9', 'C'
KCODE3:	DB	'*', '0', '/', 'D'

END

